# 密钥
作为一个安全设备，TPM最强大的功能就是，应用程序在使用密钥的同时保证密钥安全地保存在硬件设备中。TPM可以生成密钥，也可以导入在外部生成的密钥。它支持对称和非对称密钥。第二章已经描述了这两种密钥的基本原理。

因为TPM设备的存储资源有限，必要时应用程序可以安全地将密钥换入换出TPM，这时TPM可以被认为是一个密钥缓存。相关操作会在“密钥缓存”这一节描述。

一共有三种密钥组织架构，它们分别手控于不同的安全角色。每一种组织架构都可以将密钥组织成树形父子关系。第九章已经描述了组织架构和它们的应用。

每一个密钥都有独立的安全控制方式，包括口令，增强的授权策略，密钥复制到其他父节点或者其他TPM的限制，签名或者加解密密钥的用途限制。密钥可以被认证也可以用于认证其他密钥。密钥属性相关的内容将会在“密钥类型和属性”这一节中讨论。适用于所有TPM实体的授权操作细节，包括口令和policy，将会被推迟到第13，14章介绍。

## 密钥命令
下面介绍经常用于密钥操作的TPM命令。需要说明的是，下面的列表并不是完整的命令。参考TPM2.0规范第3部分来了解完整的命令集和API细节。这些命令将按照后续章节中描述和应用案例中出现的顺序来介绍：

* TPM2_Create和TPM2_CreatePrimary可以通过模板创建所有类型的密钥。
* TPM2_Load(用于加密的私钥)和TPM2_LoadExternal(用于公钥或者明文私钥)可以将密钥加载到TPM中。
* TPM2_ContextSave和TPM2_ContextLoad用于将密钥换入换出TPM缓存。TPM2_FlushContext用于删除TPM中的密钥。TPM2_EvictControl可以让一个密钥持续存在与TPM中或者删除一个持续存在的密钥。这些函数及其应用将会在18章详细介绍。
* TPM2_Unseal，TPM2_RSA_Encrypt，和TPM2_RSA_Decrypt使用加密密钥完成相关操作。
* TPM2_HMAC，TPM2_HMAC_Start，TPM2_SequenceUpdate，和TPM2_SequenceCompete使用对称签名密钥和HMAC算法完成相关操作。
* TPM2_Sign是一个通用的签名命令，TPM2_VerifySignature用于验证数字签名。
* TPM2_Certify，TPM2_Quote，TPM2_GetSessionAuditDigest，TPM_GetTime是用于对认证数据签名的特殊命令。具体来讲，TPM2_Certify可以实现一个密钥签名另外一个密钥（密钥的名称）。这样以来，TPM就可以作为一个证书授权机构，使用自己的密钥认证证书相关密钥的属性。

## 密钥生成器
理论上来说，TPM最强大的能力是，它能产生密钥并将相关的秘密信息安全地保存在硬件中。密钥生成器基于TPM自己的随机数发生器，它不依赖任何外部的随机源。因此，它消除了由较弱的软件随机数生成器或者不充足的熵值带来的弱点。

## 主密钥和种子
TPM的密钥可以组成一个等级架构，在这个架构中父节点的密钥用于加密子节点的密钥。主密钥就是这个密钥组织架构中的根密钥。它们没有父节点。第9章讨论了组织架构的通用概念及其应用。后续再“密钥组织架构”这一节我们将重点讨论一些密钥相关的组织架构。

这一小结将按照主密钥生成和销毁的顺序讨论。在本节叙述中，调用者表示对TPM做初始配置，发送命令和接收命令响应的软件；TPM则是执行命令的硬件设备。配置软件（参考第19章）通常会执行上述步骤。用户可能会使用主密钥，但是通常他们不会创建这些主密钥。

主密钥的创建命令使用易于理解的命名方式TPM2_CreatePrimary。如果你熟悉TP1.2，你就知道TPM1.2中有一个和TPM2.0主密钥相同的密钥：根存储密钥（SRK），这个密钥会一直存在于TPM中。TPM2.0允许有无限多个主密钥，但是它们并不一定一直存在于TPM中。你可能会说，因为TPM的永久性存储空间有限，所以密钥的数量也不可能是无限多的，事实不是这样的。主种子的存在可以支持无限多主密钥。

## 密钥的持续性
## 密钥缓存
## 密钥授权
## 密钥销毁
## 密钥组织架构
## 密钥类型及其属性
### 对称和非对称密钥属性
### 密钥复制属性
### 受限制的签名密钥
### 受限制的解密密钥
## 上下文管理和加载
## 空组织架构
## 认证
## 密钥结构详解
## 总结
